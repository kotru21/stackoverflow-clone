/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_healthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_findAllUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_findOneUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}/statistic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_getUserStatistic"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MeController_getProfile"];
        put?: never;
        post?: never;
        delete: operations["MeController_deleteProfile"];
        options?: never;
        head?: never;
        patch: operations["MeController_updateProfile"];
        trace?: never;
    };
    "/api/me/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["MeController_changePassword"];
        trace?: never;
    };
    "/api/snippets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["SnippetsController_findAllSnippets"];
        put?: never;
        post: operations["SnippetsController_createSnippet"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/snippets/languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["SnippetsController_getLanguages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/snippets/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["SnippetsController_findOneSnippet"];
        put?: never;
        post?: never;
        delete: operations["SnippetsController_delete"];
        options?: never;
        head?: never;
        patch: operations["SnippetsController_updateSnippet"];
        trace?: never;
    };
    "/api/snippets/{id}/mark": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["SnippetsController_markSnippet"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["CommentsController_createComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/comments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["CommentsController_deleteComment"];
        options?: never;
        head?: never;
        patch: operations["CommentsController_updateComment"];
        trace?: never;
    };
    "/api/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AuthController_getAuth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["RegisterController_registerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/questions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["QuestionsController_getQuestions"];
        put?: never;
        post: operations["QuestionsController_createQuestion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/questions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["QuestionsController_getQuestion"];
        put?: never;
        post?: never;
        delete: operations["QuestionsController_deleteQuestion"];
        options?: never;
        head?: never;
        patch: operations["QuestionsController_updateQuestion"];
        trace?: never;
    };
    "/api/answers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AnswersController_getAnswers"];
        put?: never;
        post: operations["AnswersController_createAnswer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/answers/{id}/state/{state}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["AnswersController_updateState"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/answers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["AnswersController_deleteAnswer"];
        options?: never;
        head?: never;
        patch: operations["AnswersController_updateAnswer"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        PaginatedMetaDocumented: {
            /** Number of items per page */
            itemsPerPage: number;
            /** Total number of items */
            totalItems: number;
            /** Current requested page */
            currentPage: number;
            /** Total number of pages */
            totalPages: number;
            /** Sorting by columns */
            sortBy?: (string | ("ASC" | "DESC"))[][];
            /** Search by fields */
            searchBy?: string[];
            /** Search term */
            search?: string;
            /** List of selected fields */
            select?: string[];
            /** Filters that applied to the query */
            filter?: Record<string, never>;
        };
        PaginatedLinksDocumented: {
            /** Link to first page */
            first?: string;
            /** Link to previous page */
            previous?: string;
            /** Link to current page */
            current?: string;
            /** Link to next page */
            next?: string;
            /** Link to last page */
            last?: string;
        };
        PaginatedDocumented: {
            /** Array of entities */
            data: Record<string, never>[];
            /** Pagination Metadata */
            meta: components["schemas"]["PaginatedMetaDocumented"];
            /** Links to pages */
            links: components["schemas"]["PaginatedLinksDocumented"];
        };
        /**
         * @description User's role
         * @enum {string}
         */
        UserRoles: "user" | "admin";
        UserDto: {
            /** @description User's identifier */
            id: number;
            /** @description User's nickname */
            username: string;
            role: components["schemas"]["UserRoles"];
        };
        StatisticDto: {
            /**
             * @description Number of snippets created by user
             * @example 5
             */
            snippetsCount: number;
            /**
             * @description User activity rating
             * @example 150
             */
            rating: number;
            /**
             * @description Number of comments made by user
             * @example 10
             */
            commentsCount: number;
            /**
             * @description Number of likes given by user
             * @example 20
             */
            likesCount: number;
            /**
             * @description Number of dislikes given by user
             * @example 5
             */
            dislikesCount: number;
            /**
             * @description Number of questions asked by user
             * @example 8
             */
            questionsCount: number;
            /**
             * @description Number of correct answers given by user
             * @example 12
             */
            correctAnswersCount: number;
            /**
             * @description Number of regular answers given by user
             * @example 15
             */
            regularAnswersCount: number;
        };
        UserStatisticDto: {
            /** @description User's identifier */
            id: number;
            /** @description User's nickname */
            username: string;
            role: components["schemas"]["UserRoles"];
            /** @description User activity statistics */
            statistic: components["schemas"]["StatisticDto"];
        };
        UpdateUserDto: {
            /** @description New user nickname */
            username: string;
        };
        UpdateResponseDto: {
            /** @description Amount of updated items */
            updatedCount: number;
        };
        ChangePasswordDto: {
            /** @description Old user's password */
            oldPassword: string;
            /** @description New password */
            newPassword: string;
        };
        SnippetDto: {
            /** @description Snippet's identifier */
            id: number;
            /** @description Snippet's programming language */
            language: string;
            /** @description Snippet's content */
            code: string;
            /** @description Owner of the snippet */
            user: components["schemas"]["UserDto"];
        };
        /**
         * @description Snippet's language (programming language)
         * @enum {string}
         */
        Languages: "JavaScript" | "Python" | "Java" | "C/C++" | "C#" | "Go" | "Kotlin" | "Ruby";
        CreateSnippetDto: {
            code: components["schemas"]["Languages"];
            /** @description Snippet's language (programming language) */
            language: string;
        };
        UpdateSnippetDto: {
            /** @description New snippet content */
            code?: string;
            /** @description New snippet language */
            language?: string;
        };
        /**
         * @description User mark for the snippet. like, dislike or none (remove any existing mark: like or dislike)
         * @enum {string}
         */
        SnippetMark: "like" | "dislike" | "none";
        MarkSnippetDto: {
            mark: components["schemas"]["SnippetMark"];
        };
        CreateCommentDto: {
            /** @description Comment's content */
            content: string;
            /** @description Id of the commenting snippet */
            snippetId: number;
        };
        CommentDto: {
            /** @description Comment's identifier */
            id: number;
            /** @description Comment's content */
            content: string;
            /** @description Owner of the comment */
            user: components["schemas"]["UserDto"];
        };
        UpdateCommentDto: {
            /** @description New comment content */
            content: string;
        };
        CredentialsDto: {
            /** @description User's nickname */
            username: string;
            /** @description User's password */
            password: string;
        };
        QuestionWithStatusDto: {
            /** @description Unique identifier of the question */
            id: number;
            /** @description Title of the question */
            title: string;
            /** @description Detailed description of the question */
            description: string;
            /** @description Code snippet attached to the question */
            attachedCode?: string;
            /** @description User who created the question */
            user: Record<string, never>;
            /** @description List of answers to this question */
            answers: unknown[][];
            /** @description Indicates if question is resolved */
            isResolved: boolean;
        };
        CreateQuestionDto: {
            /** @description Question title */
            title: string;
            /** @description Question description */
            description: string;
            /** @description Question attached code */
            attachedCode: string;
        };
        UpdateQuestionDto: {
            /** @description Question description */
            title: string;
            /** @description Question description */
            description: string;
            /** @description Question attached code */
            attachedCode: string;
        };
        QuestionDto: {
            /** @description Unique identifier of the question */
            id: number;
            /** @description Title of the question */
            title: string;
            /** @description Detailed description of the question */
            description: string;
            /** @description Code snippet attached to the question */
            attachedCode?: string;
            /** @description User who created the question */
            user: Record<string, never>;
            /** @description List of answers to this question */
            answers: unknown[][];
        };
        CreateAnswerDto: {
            /** @description Answer content */
            content: string;
            /** @description Id of the commenting question */
            questionId: number;
        };
        /** @enum {string} */
        AnswerState: "correct" | "incorrect";
        UpdateAnswerDto: {
            /** @description Answer content */
            content: string;
        };
        AnswerDto: {
            /**
             * @description The unique identifier of the answer
             * @example 1
             */
            id: number;
            /**
             * @description The content of the answer
             * @example Paris is the capital of France
             */
            content: string;
            /**
             * @description Indicates whether this answer is correct
             * @example true
             */
            isCorrect: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_healthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_findAllUsers: {
        parameters: {
            query?: {
                /** @description Page number to retrieve.If you provide invalid value the default page number will applied
                 *             <p>
                 *                  <b>Example: </b> 1
                 *               </p>
                 *             <p>
                 *                  <b>Default Value: </b> 1
                 *               </p>
                 *              */
                page?: number;
                /** @description Number of records per page.
                 *           <p>
                 *                  <b>Example: </b> 20
                 *               </p>
                 *           <p>
                 *                  <b>Default Value: </b> 15
                 *               </p>
                 *           <p>
                 *                  <b>Max Value: </b> 100
                 *               </p>
                 *
                 *           If provided value is greater than max value, max value will be applied.
                 *            */
                limit?: number;
                /** @description Parameter to sort by.
                 *           <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>
                 *           <p>
                 *                  <b>Format: </b> fieldName:DIRECTION
                 *               </p>
                 *           <p>
                 *                  <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC
                 *               </p>
                 *           <p>
                 *                  <b>Default Value: </b> username:ASC
                 *               </p>
                 *           <h4>Available Fields</h4><ul><li>id</li>
                 *     <li>username</li>
                 *     <li>role</li></ul>
                 *            */
                sortBy?: ("id:ASC" | "id:DESC" | "username:ASC" | "username:DESC" | "role:ASC" | "role:DESC")[];
                /** @description Search term to filter result values
                 *             <p>
                 *                  <b>Example: </b> John
                 *               </p>
                 *             <p>
                 *                  <b>Default Value: </b> No default value
                 *               </p>
                 *              */
                search?: string;
                /** @description List of fields to search by term to filter result values
                 *             <p>
                 *                  <b>Example: </b> username
                 *               </p>
                 *             <p>
                 *                  <b>Default Value: </b> By default all fields mentioned below will be used to search by term
                 *               </p>
                 *             <h4>Available Fields</h4><ul><li>username</li></ul>
                 *              */
                searchBy?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDocumented"] & {
                        data?: components["schemas"]["UserDto"][];
                        meta?: {
                            select?: string[];
                            filter?: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    UsersController_findOneUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contains found user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
        };
    };
    UsersController_getUserStatistic: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contains found user with statistic information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserStatisticDto"];
                };
            };
        };
    };
    MeController_getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contains found user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
        };
    };
    MeController_deleteProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contains deleted user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
        };
    };
    MeController_updateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            /** @description Contains amount of updated users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateResponseDto"];
                };
            };
        };
    };
    MeController_changePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangePasswordDto"];
            };
        };
        responses: {
            /** @description Contains amount of updated users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateResponseDto"];
                };
            };
        };
    };
    SnippetsController_findAllSnippets: {
        parameters: {
            query?: {
                /** @description Id of the snippet owner */
                userId?: number;
                /** @description Page number to retrieve.If you provide invalid value the default page number will applied
                 *             <p>
                 *                  <b>Example: </b> 1
                 *               </p>
                 *             <p>
                 *                  <b>Default Value: </b> 1
                 *               </p>
                 *              */
                page?: number;
                /** @description Number of records per page.
                 *           <p>
                 *                  <b>Example: </b> 20
                 *               </p>
                 *           <p>
                 *                  <b>Default Value: </b> 15
                 *               </p>
                 *           <p>
                 *                  <b>Max Value: </b> 100
                 *               </p>
                 *
                 *           If provided value is greater than max value, max value will be applied.
                 *            */
                limit?: number;
                /** @description Parameter to sort by.
                 *           <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>
                 *           <p>
                 *                  <b>Format: </b> fieldName:DIRECTION
                 *               </p>
                 *           <p>
                 *                  <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC
                 *               </p>
                 *           <p>
                 *                  <b>Default Value: </b> id:ASC
                 *               </p>
                 *           <h4>Available Fields</h4><ul><li>id</li>
                 *     <li>code</li>
                 *     <li>language</li></ul>
                 *            */
                sortBy?: ("id:ASC" | "id:DESC" | "code:ASC" | "code:DESC" | "language:ASC" | "language:DESC")[];
                /** @description Search term to filter result values
                 *             <p>
                 *                  <b>Example: </b> John
                 *               </p>
                 *             <p>
                 *                  <b>Default Value: </b> No default value
                 *               </p>
                 *              */
                search?: string;
                /** @description List of fields to search by term to filter result values
                 *             <p>
                 *                  <b>Example: </b> code,language
                 *               </p>
                 *             <p>
                 *                  <b>Default Value: </b> By default all fields mentioned below will be used to search by term
                 *               </p>
                 *             <h4>Available Fields</h4><ul><li>code</li>
                 *     <li>language</li></ul>
                 *              */
                searchBy?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDocumented"] & {
                        data?: components["schemas"]["SnippetDto"][];
                        meta?: {
                            select?: string[];
                            filter?: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    SnippetsController_createSnippet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSnippetDto"];
            };
        };
        responses: {
            /** @description Contains created snippet */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SnippetDto"];
                };
            };
        };
    };
    SnippetsController_getLanguages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contains supported languages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    SnippetsController_findOneSnippet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contains found snippet */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SnippetDto"];
                };
            };
        };
    };
    SnippetsController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contains deleted snippet */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SnippetDto"];
                };
            };
        };
    };
    SnippetsController_updateSnippet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSnippetDto"];
            };
        };
        responses: {
            /** @description Contains count of updated snippets */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateResponseDto"];
                };
            };
        };
    };
    SnippetsController_markSnippet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MarkSnippetDto"];
            };
        };
        responses: {
            /** @description Contains new user mark for the snippet */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MarkSnippetDto"];
                };
            };
        };
    };
    CommentsController_createComment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCommentDto"];
            };
        };
        responses: {
            /** @description Contains created comment */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentDto"];
                };
            };
        };
    };
    CommentsController_deleteComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contains deleted comment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentDto"];
                };
            };
        };
    };
    CommentsController_updateComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCommentDto"];
            };
        };
        responses: {
            /** @description Contains amount of updated comments */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateResponseDto"];
                };
            };
        };
    };
    AuthController_getAuth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contains authenticated user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User credentials */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CredentialsDto"];
            };
        };
        responses: {
            /** @description Contains authenticated user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RegisterController_registerUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CredentialsDto"];
            };
        };
        responses: {
            /** @description Contains information about registred user */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
        };
    };
    QuestionsController_getQuestions: {
        parameters: {
            query?: {
                /** @description Page number to retrieve.If you provide invalid value the default page number will applied
                 *             <p>
                 *                  <b>Example: </b> 1
                 *               </p>
                 *             <p>
                 *                  <b>Default Value: </b> 1
                 *               </p>
                 *              */
                page?: number;
                /** @description Number of records per page.
                 *           <p>
                 *                  <b>Example: </b> 20
                 *               </p>
                 *           <p>
                 *                  <b>Default Value: </b> 15
                 *               </p>
                 *           <p>
                 *                  <b>Max Value: </b> 100
                 *               </p>
                 *
                 *           If provided value is greater than max value, max value will be applied.
                 *            */
                limit?: number;
                /** @description Parameter to sort by.
                 *           <p>To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting</p>
                 *           <p>
                 *                  <b>Format: </b> fieldName:DIRECTION
                 *               </p>
                 *           <p>
                 *                  <b>Example: </b> sortBy=id:DESC&sortBy=createdAt:ASC
                 *               </p>
                 *           <p>
                 *                  <b>Default Value: </b> title:DESC
                 *               </p>
                 *           <h4>Available Fields</h4><ul><li>id</li>
                 *     <li>title</li>
                 *     <li>description</li>
                 *     <li>attachedCode</li></ul>
                 *            */
                sortBy?: ("id:ASC" | "id:DESC" | "title:ASC" | "title:DESC" | "description:ASC" | "description:DESC" | "attachedCode:ASC" | "attachedCode:DESC")[];
                /** @description Search term to filter result values
                 *             <p>
                 *                  <b>Example: </b> John
                 *               </p>
                 *             <p>
                 *                  <b>Default Value: </b> No default value
                 *               </p>
                 *              */
                search?: string;
                /** @description List of fields to search by term to filter result values
                 *             <p>
                 *                  <b>Example: </b> title,description,attachedCode
                 *               </p>
                 *             <p>
                 *                  <b>Default Value: </b> By default all fields mentioned below will be used to search by term
                 *               </p>
                 *             <h4>Available Fields</h4><ul><li>title</li>
                 *     <li>description</li>
                 *     <li>attachedCode</li></ul>
                 *              */
                searchBy?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDocumented"] & {
                        data?: components["schemas"]["QuestionWithStatusDto"][];
                        meta?: {
                            select?: string[];
                            filter?: Record<string, never>;
                        };
                    };
                };
            };
        };
    };
    QuestionsController_createQuestion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateQuestionDto"];
            };
        };
        responses: {
            /** @description Returns created question */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateQuestionDto"];
                };
            };
        };
    };
    QuestionsController_getQuestion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns single question by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestionWithStatusDto"];
                };
            };
        };
    };
    QuestionsController_deleteQuestion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deletes question */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestionDto"];
                };
            };
        };
    };
    QuestionsController_updateQuestion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateQuestionDto"];
            };
        };
        responses: {
            /** @description Updates question */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuestionDto"];
                };
            };
        };
    };
    AnswersController_getAnswers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns all answers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AnswersController_createAnswer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAnswerDto"];
            };
        };
        responses: {
            /** @description Returns created answer */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AnswersController_updateState: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                state: components["schemas"]["AnswerState"];
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Updates correct/incorrect state of answer */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AnswersController_deleteAnswer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deletes answer */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnswerDto"];
                };
            };
        };
    };
    AnswersController_updateAnswer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAnswerDto"];
            };
        };
        responses: {
            /** @description Updates answer content */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
